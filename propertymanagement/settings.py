"""
Django settings for propertymanagement project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import json
from . import *

# import environ
# env = environ.Env(
#     # set casting, default value
#     DEBUG=(bool, False)
# )
# # reading .env file
# environ.Env.read_env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

with open(os.path.join(BASE_DIR,"config.json"),"r") as filename:
    data = json.load(filename)
    

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = env('SECRET_KEY')
SECRET_KEY ="vf8tpnmam=0xoxx(-y)_*nssgrn79)lm@+iu9c+zyl74kq^w-f"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['rents-it.herokuapp.com','127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #Added app
    'django_extensions',
    'rest_framework',
    'crispy_forms',
    'bootstrap4',
    'storages',

    #custom apps
    'accounts',
    'address',
    'housing'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'propertymanagement.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'propertymanagement.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': os.environ.get("DATABASE_NAME"),
#         'USER': os.environ.get("DATABASE_USER"),
#         'PASSWORD': os.environ.get("DATABASE_PASSWORD"),
#         'HOST': os.environ.get("DATABASE_HOST"),
#         'PORT': os.environ.get("DATABASE_PORT"),

#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': data["aws_db"]["DB_NAME"],
#         'USER': data["aws_db"]["DB_USER"],
#         'PASSWORD':data["aws_db"]["DB_PASSWORD"],
#         'HOST':data["aws_db"]["DB_HOST"],
#         'PORT':data["aws_db"]["DB_PORT"],
    
        # # 'ENGINE': 'django.db.backends.mysql',
        # # 'NAME': 'rentalProperties',
        # 'ENGINE': 'django.db.backends.postgresql_psycopg2',
        # 'NAME': 'rentalproperties',
        # 'USER': 'django',
        # 'PASSWORD':'Django',
        # 'HOST':'localhost',
        # # 'PORT':'3306'
        # 'PORT':''
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'US/Central'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_PROFILE_MODULE = 'accounts.UserProfile' 
LOGIN_REDIRECT_URL = '/'
# LOGOUT_REDIRECT_URL = "/"

#EMAIl settings

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = data['email']
EMAIL_HOST_PASSWORD = data['passwrd']

LIST_OF_EMAIL_RECIPIENTS = data['email']
# EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"

# SENDGRID_API_KEY = data['sendgrid_apikey']
# SENDGRID_SANDBOX_MODE_IN_DEBUG = False
# LIST_OF_EMAIL_RECIPIENTS = data['email']

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/


STATIC_ROOT = os.path.join(BASE_DIR, 'assets')
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]



MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR,'media')


# #S3 BUKECT Configuration
# AWS_ACCESS_KEY_ID = data['aws_s3']['AWS_ACCESS_KEY_ID']
# AWS_SECRET_ACCESS_KEY = data['aws_s3']['AWS_SECRET_ACCESS_KEY']

# AWS_STORAGE_BUCKET_NAME = data['aws_s3']['AWS_BUCKET_NAME']

# #Install django storages and bot03
# AWS_S3_FILE_OVERWRITE  = False
# AWS_DEFAULT_ACL = None
# AWS_QUERYSTRING_AUTH = False
# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
